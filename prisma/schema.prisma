// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  balance       Float     @default(100.0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactions  Transaction[]
  crashBets     CrashBet[]
}

// Modelos para o jogo Crash
model CrashGame {
  id            String    @id @default(uuid())
  crashPoint    Float     // O ponto onde o jogo "crashou"
  seed          String    // Semente usada para gerar o crashPoint
  hash          String    // Hash da semente para verificação
  status        CrashGameStatus @default(PENDING)
  bets          CrashBet[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CrashBet {
  id            String    @id @default(uuid())
  amount        Float     // Valor apostado
  cashoutMultiplier Float?  // Multiplicador no momento do cashout (null se não fez cashout)
  autoWithdrawAt Float?   // Multiplicador para saque automático (opcional)
  status        CrashBetStatus @default(ACTIVE)
  profit        Float?    // Lucro obtido (null se perdeu)
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  gameId        String
  game          CrashGame @relation(fields: [gameId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Transaction {
  id            String    @id @default(uuid())
  amount        Float
  type          TransactionType
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  CRASH_BET_PLACEMENT
  CRASH_BET_SETTLEMENT
}

enum CrashGameStatus {
  PENDING    // Aguardando início
  RUNNING    // Em andamento
  CRASHED    // Finalizado (crashou)
  COMPLETED  // Todas as apostas foram processadas
}

enum CrashBetStatus {
  ACTIVE     // Aposta ativa
  CASHED_OUT // Usuário sacou antes do crash
  LOST       // Usuário não sacou a tempo
  CANCELLED  // Aposta cancelada (raro)
}
